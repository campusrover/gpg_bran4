// Generated by gencpp from file lino_msgs/Arm.msg
// DO NOT EDIT!


#ifndef LINO_MSGS_MESSAGE_ARM_H
#define LINO_MSGS_MESSAGE_ARM_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace lino_msgs
{
template <class ContainerAllocator>
struct Arm_
{
  typedef Arm_<ContainerAllocator> Type;

  Arm_()
    : command()
    , arg1(0.0)
    , arg2(0.0)  {
    }
  Arm_(const ContainerAllocator& _alloc)
    : command(_alloc)
    , arg1(0.0)
    , arg2(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _command_type;
  _command_type command;

   typedef float _arg1_type;
  _arg1_type arg1;

   typedef float _arg2_type;
  _arg2_type arg2;





  typedef boost::shared_ptr< ::lino_msgs::Arm_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::lino_msgs::Arm_<ContainerAllocator> const> ConstPtr;

}; // struct Arm_

typedef ::lino_msgs::Arm_<std::allocator<void> > Arm;

typedef boost::shared_ptr< ::lino_msgs::Arm > ArmPtr;
typedef boost::shared_ptr< ::lino_msgs::Arm const> ArmConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::lino_msgs::Arm_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::lino_msgs::Arm_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::lino_msgs::Arm_<ContainerAllocator1> & lhs, const ::lino_msgs::Arm_<ContainerAllocator2> & rhs)
{
  return lhs.command == rhs.command &&
    lhs.arg1 == rhs.arg1 &&
    lhs.arg2 == rhs.arg2;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::lino_msgs::Arm_<ContainerAllocator1> & lhs, const ::lino_msgs::Arm_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace lino_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::lino_msgs::Arm_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lino_msgs::Arm_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::lino_msgs::Arm_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::lino_msgs::Arm_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lino_msgs::Arm_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lino_msgs::Arm_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::lino_msgs::Arm_<ContainerAllocator> >
{
  static const char* value()
  {
    return "22db7cf47707ed15d576c944473b1120";
  }

  static const char* value(const ::lino_msgs::Arm_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x22db7cf47707ed15ULL;
  static const uint64_t static_value2 = 0xd576c944473b1120ULL;
};

template<class ContainerAllocator>
struct DataType< ::lino_msgs::Arm_<ContainerAllocator> >
{
  static const char* value()
  {
    return "lino_msgs/Arm";
  }

  static const char* value(const ::lino_msgs::Arm_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::lino_msgs::Arm_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string command\n"
"float32 arg1\n"
"float32 arg2\n"
;
  }

  static const char* value(const ::lino_msgs::Arm_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::lino_msgs::Arm_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.command);
      stream.next(m.arg1);
      stream.next(m.arg2);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Arm_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::lino_msgs::Arm_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::lino_msgs::Arm_<ContainerAllocator>& v)
  {
    s << indent << "command: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.command);
    s << indent << "arg1: ";
    Printer<float>::stream(s, indent + "  ", v.arg1);
    s << indent << "arg2: ";
    Printer<float>::stream(s, indent + "  ", v.arg2);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LINO_MSGS_MESSAGE_ARM_H
