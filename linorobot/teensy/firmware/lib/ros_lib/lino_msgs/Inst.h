// Generated by gencpp from file lino_msgs/Inst.msg
// DO NOT EDIT!


#ifndef LINO_MSGS_MESSAGE_INST_H
#define LINO_MSGS_MESSAGE_INST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace lino_msgs
{
template <class ContainerAllocator>
struct Inst_
{
  typedef Inst_<ContainerAllocator> Type;

  Inst_()
    : l_encoder(0.0)
    , r_encoder(0.0)
    , l_piderror(0.0)
    , r_piderror(0.0)
    , l_rpm(0.0)
    , r_rpm(0.0)  {
    }
  Inst_(const ContainerAllocator& _alloc)
    : l_encoder(0.0)
    , r_encoder(0.0)
    , l_piderror(0.0)
    , r_piderror(0.0)
    , l_rpm(0.0)
    , r_rpm(0.0)  {
  (void)_alloc;
    }



   typedef float _l_encoder_type;
  _l_encoder_type l_encoder;

   typedef float _r_encoder_type;
  _r_encoder_type r_encoder;

   typedef float _l_piderror_type;
  _l_piderror_type l_piderror;

   typedef float _r_piderror_type;
  _r_piderror_type r_piderror;

   typedef float _l_rpm_type;
  _l_rpm_type l_rpm;

   typedef float _r_rpm_type;
  _r_rpm_type r_rpm;





  typedef boost::shared_ptr< ::lino_msgs::Inst_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::lino_msgs::Inst_<ContainerAllocator> const> ConstPtr;

}; // struct Inst_

typedef ::lino_msgs::Inst_<std::allocator<void> > Inst;

typedef boost::shared_ptr< ::lino_msgs::Inst > InstPtr;
typedef boost::shared_ptr< ::lino_msgs::Inst const> InstConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::lino_msgs::Inst_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::lino_msgs::Inst_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::lino_msgs::Inst_<ContainerAllocator1> & lhs, const ::lino_msgs::Inst_<ContainerAllocator2> & rhs)
{
  return lhs.l_encoder == rhs.l_encoder &&
    lhs.r_encoder == rhs.r_encoder &&
    lhs.l_piderror == rhs.l_piderror &&
    lhs.r_piderror == rhs.r_piderror &&
    lhs.l_rpm == rhs.l_rpm &&
    lhs.r_rpm == rhs.r_rpm;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::lino_msgs::Inst_<ContainerAllocator1> & lhs, const ::lino_msgs::Inst_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace lino_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::lino_msgs::Inst_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lino_msgs::Inst_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::lino_msgs::Inst_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::lino_msgs::Inst_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lino_msgs::Inst_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lino_msgs::Inst_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::lino_msgs::Inst_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f1994f0f04917e939ed782420b6a1041";
  }

  static const char* value(const ::lino_msgs::Inst_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf1994f0f04917e93ULL;
  static const uint64_t static_value2 = 0x9ed782420b6a1041ULL;
};

template<class ContainerAllocator>
struct DataType< ::lino_msgs::Inst_<ContainerAllocator> >
{
  static const char* value()
  {
    return "lino_msgs/Inst";
  }

  static const char* value(const ::lino_msgs::Inst_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::lino_msgs::Inst_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 l_encoder\n"
"float32 r_encoder\n"
"float32 l_piderror\n"
"float32 r_piderror\n"
"float32 l_rpm\n"
"float32 r_rpm\n"
;
  }

  static const char* value(const ::lino_msgs::Inst_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::lino_msgs::Inst_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.l_encoder);
      stream.next(m.r_encoder);
      stream.next(m.l_piderror);
      stream.next(m.r_piderror);
      stream.next(m.l_rpm);
      stream.next(m.r_rpm);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Inst_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::lino_msgs::Inst_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::lino_msgs::Inst_<ContainerAllocator>& v)
  {
    s << indent << "l_encoder: ";
    Printer<float>::stream(s, indent + "  ", v.l_encoder);
    s << indent << "r_encoder: ";
    Printer<float>::stream(s, indent + "  ", v.r_encoder);
    s << indent << "l_piderror: ";
    Printer<float>::stream(s, indent + "  ", v.l_piderror);
    s << indent << "r_piderror: ";
    Printer<float>::stream(s, indent + "  ", v.r_piderror);
    s << indent << "l_rpm: ";
    Printer<float>::stream(s, indent + "  ", v.l_rpm);
    s << indent << "r_rpm: ";
    Printer<float>::stream(s, indent + "  ", v.r_rpm);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LINO_MSGS_MESSAGE_INST_H
